{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prafu\\\\OneDrive\\\\Desktop\\\\KubeAI2\\\\Kubernets-hackathon\\\\src\\\\pages\\\\Issues.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport './Issues.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Issues = () => {\n  _s();\n  const [nodeCpuUtil, setNodeCpuUtil] = useState(\"\");\n  const [containerCpuUtil, setContainerCpuUtil] = useState(\"\");\n  // ... (other state variables for input fields)\n  const [predictedAnomaly, setPredictedAnomaly] = useState(null);\n  const [predictionError, setPredictionError] = useState(null);\n  const [loadingPrediction, setLoadingPrediction] = useState(false);\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    // ... (your existing handleInputChange function)\n  };\n  const predictAnomaly = async () => {\n    setLoadingPrediction(true);\n    setPredictionError(null);\n    setPredictedAnomaly(null);\n    try {\n      const requestData = {\n        node_cpu_utilization: nodeCpuUtil,\n        container_cpu_usage: containerCpuUtil\n        // ... (other input features from your state)\n      };\n      const response = await fetch(\"http://127.0.0.1:5000/predict-anomaly\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error(\"Prediction error:\", errorData);\n        throw new Error(errorData.error || `HTTP error! Status: ${response.status}`);\n      }\n      const data = await response.json();\n      if (data.is_anomaly) {\n        setPredictedAnomaly(\"Anomaly Detected\"); // Or set to data.predicted_anomaly if your backend returns the type\n      } else {\n        setPredictedAnomaly(\"No Anomaly Detected\");\n      }\n    } catch (error) {\n      console.error(\"Error during prediction:\", error);\n      setPredictionError(error.message);\n    } finally {\n      setLoadingPrediction(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"prediction-card\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u2699\\uFE0F Anomaly Prediction\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-fields\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: predictAnomaly,\n      disabled: loadingPrediction,\n      className: \"predict-button\",\n      children: loadingPrediction ? \"Predicting...\" : \"Predict Anomaly\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), predictionError && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: predictionError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 33\n    }, this), predictedAnomaly && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"prediction-result\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Prediction Result:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"predicted-type\",\n        children: predictedAnomaly\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 9\n  }, this);\n};\n_s(Issues, \"0Z9/2hpMUsolkyd7doIicc/2JbY=\");\n_c = Issues;\nexport default Issues;\nvar _c;\n$RefreshReg$(_c, \"Issues\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Issues","_s","nodeCpuUtil","setNodeCpuUtil","containerCpuUtil","setContainerCpuUtil","predictedAnomaly","setPredictedAnomaly","predictionError","setPredictionError","loadingPrediction","setLoadingPrediction","handleInputChange","event","name","value","target","predictAnomaly","requestData","node_cpu_utilization","container_cpu_usage","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","console","error","Error","status","data","is_anomaly","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/prafu/OneDrive/Desktop/KubeAI2/Kubernets-hackathon/src/pages/Issues.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport './Issues.css';\r\n\r\nconst Issues = () => {\r\n    const [nodeCpuUtil, setNodeCpuUtil] = useState(\"\");\r\n    const [containerCpuUtil, setContainerCpuUtil] = useState(\"\");\r\n    // ... (other state variables for input fields)\r\n    const [predictedAnomaly, setPredictedAnomaly] = useState(null);\r\n    const [predictionError, setPredictionError] = useState(null);\r\n    const [loadingPrediction, setLoadingPrediction] = useState(false);\r\n\r\n    const handleInputChange = (event) => {\r\n        const { name, value } = event.target;\r\n        // ... (your existing handleInputChange function)\r\n    };\r\n\r\n    const predictAnomaly = async () => {\r\n        setLoadingPrediction(true);\r\n        setPredictionError(null);\r\n        setPredictedAnomaly(null);\r\n\r\n        try {\r\n            const requestData = {\r\n                node_cpu_utilization: nodeCpuUtil,\r\n                container_cpu_usage: containerCpuUtil,\r\n                // ... (other input features from your state)\r\n            };\r\n\r\n            const response = await fetch(\"http://127.0.0.1:5000/predict-anomaly\", {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n                body: JSON.stringify(requestData),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorData = await response.json();\r\n                console.error(\"Prediction error:\", errorData);\r\n                throw new Error(errorData.error || `HTTP error! Status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n            if (data.is_anomaly) {\r\n                setPredictedAnomaly(\"Anomaly Detected\"); // Or set to data.predicted_anomaly if your backend returns the type\r\n            } else {\r\n                setPredictedAnomaly(\"No Anomaly Detected\");\r\n            }\r\n\r\n        } catch (error) {\r\n            console.error(\"Error during prediction:\", error);\r\n            setPredictionError(error.message);\r\n        } finally {\r\n            setLoadingPrediction(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"prediction-card\">\r\n            <h2>⚙️ Anomaly Prediction</h2>\r\n            <div className=\"input-fields\">\r\n                {/* ... (your input fields) */}\r\n            </div>\r\n\r\n            <button onClick={predictAnomaly} disabled={loadingPrediction} className=\"predict-button\">\r\n                {loadingPrediction ? \"Predicting...\" : \"Predict Anomaly\"}\r\n            </button>\r\n\r\n            {predictionError && <p className=\"error\">{predictionError.message}</p>}\r\n            {predictedAnomaly && (\r\n                <div className=\"prediction-result\">\r\n                    <h3>Prediction Result:</h3>\r\n                    <p className=\"predicted-type\">{predictedAnomaly}</p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Issues;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}